package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"system-for-adding-and-reading-posts-and-comments/graph/model"
	"system-for-adding-and-reading-posts-and-comments/innternal/models"

	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post := &models.Post{
		Title:    input.Title,
		Body:     input.Body,
		UserId:   input.UserID,
		Disabled: input.Disabled,
	}
	post, err := r.Repository.PostRepository.CreatePost(ctx, post)
	if err != nil {
		return nil, err
	}
	postResult := &model.Post{
		ID:       post.Id,
		Title:    post.Title,
		Body:     post.Body,
		UserID:   post.UserId,
		Disabled: post.Disabled,
	}

	return postResult, err
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input model.UpdatePost) (*model.Post, error) {
	post := &models.Post{
		Id:       input.ID,
		Title:    input.Title,
		Body:     input.Body,
		UserId:   input.UserID,
		Disabled: input.Disabled,
	}
	post, err := r.Repository.PostRepository.UpdatePost(ctx, post)
	if err != nil {
		return nil, err
	}
	result := &model.Post{
		ID:       post.Id,
		Title:    post.Title,
		Body:     post.Body,
		UserID:   post.UserId,
		Disabled: post.Disabled,
	}
	return result, err
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Repository.PostRepository.DeletePostByID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, err
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, input *model.UpdateComment) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: UpdateComment - updateComment"))
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteComment - deleteComment"))
}

// CreatUser is the resolver for the creatUser field.
func (r *mutationResolver) CreatUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &models.User{
		Name: input.Name,
	}
	user, err := r.Repository.UserRepository.CreateUser(ctx, user)
	if err != nil {
		return nil, err
	}
	commentResult := &model.User{
		ID:   user.Id,
		Name: user.Name,
	}

	return commentResult, err
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Repository.UserRepository.DeleteUserByID(ctx, id)
	if err != nil {
		return false, err
	}
	return true, err
}

// Post is the resolver for the Post field.
func (r *queryResolver) Post(ctx context.Context, postID uuid.UUID) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - Post"))
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, limit *int, offset *int, postID uuid.UUID) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// NewComment is the resolver for the newComment field.
func (r *subscriptionResolver) NewComment(ctx context.Context, postID uuid.UUID) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: NewComment - newComment"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
