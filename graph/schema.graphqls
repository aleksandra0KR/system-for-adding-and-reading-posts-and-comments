
type User {
  UserId: UUID!
  Name: String!
  Posts: [Post]
  Comments: [Comment]
}

type Post {
  PostId: UUID!
  Title: String!
  Body: String!
  UserId: UUID!
  Comments: [Comment]
  DisabledComments: Boolean!

}

type Comment {
  CommentId: UUID!
  Body: String!
  UserId: UUID!
  Parent: UUID!
  Children: [Comment]
  Post: Post !
}

input NewPost {
  Title: String!
  Body: String!
  UserId: UUID!
  DisabledComments: Boolean!
}

input UpdatePost {
  PostId: UUID!
  Title: String!
  Body: String!
  UserId: UUID!
  DisabledComments: Boolean!
}

input NewComment {
  Body: String!
  UserId: UUID!
  ParentId: UUID
  PostId: UUID !
}

input UpdateComment {
  Body: String!
}

input NewUser {
  Name: String!
}

type Mutation {
  createPost(input: NewPost!): Post!
  updatePost(input: UpdatePost!): Post!
  deletePost(PostId: UUID!): Boolean!

  createComment(input: NewComment!): Comment!
  updateComment(input: UpdateComment): Comment !
  deleteComment(CommentId: UUID!): Boolean!

  creatUser(input: NewUser!): User!
  deleteUser(UserId: UUID!): Boolean!
}

type Subscription {
  newComment(postId: UUID!): Comment!
}

type Query {
  Post(postId: UUID!): Post
  comments(limit: Int = 10, offset: Int = 0, postId: UUID!): [Comment!]!
}

scalar UUID
scalar Time